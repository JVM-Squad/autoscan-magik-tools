#% text_encoding = iso8859_1

def_slotted_exemplar(
	:sonar_test_case,
	{
		{:test, _unset, :readable, :public},
		{:exceptions, _unset, :readable, :public}
	},
	{@user:sonar_test_base})
$

_method sonar_test_case.new(p_test, p_name, _optional p_parent)
	_return _clone.init(p_test, p_name, p_parent)
_endmethod
$

_private _method sonar_test_case.init(p_test, p_name, p_parent)
	_super.init(p_name, p_parent)
	.test << p_test
	.exceptions << rope.new()
	_return _self
_endmethod
$

_method sonar_test_case.add_exception(p_exception)
	.exceptions.add_last(p_exception)
_endmethod
$

_method sonar_test_case.source_file
	_local l_method_name << .test.get_name()
	_local l_method << .test.method(l_method_name)
	_return l_method.source_file
_endmethod
$

_method sonar_test_case.write_to_stream(p_xml_stream)
	p_xml_stream.start_element("testCase", :name, _self.name, :duration, _self.runtime_ms)
	_for i_exception _over .exceptions.fast_elements()
	_loop
		i_exception.write_to_stream(p_xml_stream)
	_endloop
	p_xml_stream.end_element("testCase")
_endmethod
$

_method sonar_test_case.show_on(p_stream)
	p_stream.write(_self.class_name, %(, .test, ", ", .name, ", ", .parent)
_endmethod
$
