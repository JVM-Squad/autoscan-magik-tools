#% text_encoding = iso8859_1

# _dynamic !compiler_info!
# this can be handy to store method/procedure meta data

def_slotted_exemplar(
	:line_coverage_compiler_tracker,
	{
	},
	{})
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_compiler_tracker.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_compiler_tracker.init()
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_compiler_tracker.activate()
	magik_rep.add_dependent(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_compiler_tracker.deactivate()
	magik_rep.remove_dependent(_self)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_compiler_tracker.note_change(p_who, p_what, _gather p_data)
	_if p_who _is magik_rep _andif
	    p_what _is :pre_process _andif
	    p_data.first _is :method
	_then
		_if p_data.size >= 8 _andif
		    p_data[8].method(:cg_for_process|()|) _isnt _unset
		_then
			_self.on_compile_method(_scatter p_data)
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_compiler_tracker.on_compile_method(_gather p_data)
	_local l_mpn << p_data[8]
	
	# source file
	_dynamic !source_file!
	_local l_source_file << !source_file!
	
	# absolute lines
	_dynamic !compiler_input!
	_local l_transmit_line << !compiler_input!.line_number
	_local l_text << p_data[9]
	_local l_line_start_offset << l_transmit_line - l_text.line
	_local l_line_start << l_transmit_line - l_text.line + l_mpn.mark.line
	_local l_line_end << l_transmit_line - 1
	
	# breakpoints
	_local l_proc << p_data[4]
	_local l_combiner << line_breakpoint_combiner
	_local l_map << l_combiner.build_line_breakpoint_map(l_mpn, l_proc)
	
	# absolute lines with breakpoints
	_local l_lines_breakpoints << hash_table.new()
	_for i_line, i_breakpoint _over l_map.fast_keys_and_elements()
	_loop
		_local l_absolute_line << i_line + l_line_start_offset
		l_lines_breakpoints[l_absolute_line] << i_breakpoint
	_endloop
	
	# store info on procedure
	_dynamic !current_package!
	_self.store_procedure_metadata(l_proc,
				       :package_name, !current_package!.name,
				       :class_name, p_data[2].class_name,
				       :method_name, p_data[3],
				       :source_file, l_source_file,
				       :breakpoints, l_lines_breakpoints,
				       :line_start, l_line_start,
				       :line_end, l_line_end)
_endmethod
$


_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_compiler_tracker.store_procedure_metadata(p_procedure, _gather p_metadata)
	_local l_props << property_list.new_from_gathered(p_metadata)
	p_procedure.line_coverage_data << l_props
_endmethod
$
