#% text_encoding = iso8859_1

def_slotted_exemplar(
	:line_coverage_tracker,
	{
		{:coverage, _unset},
		{:last_breakpoint, _unset}
	},
	{})
$

line_coverage_tracker.define_slot_access(
	:coverage,
	:read,
	:public)
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.new()
	_return _clone.init()
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_tracker.init()
	.coverage << hash_table.new()
	.last_breakpoint << {_unset, _unset}
	_return _self
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.set_dummy_sysevent_handler()
	_local l_last_bpt << .last_breakpoint
	_local l_handler_proc <<
		_proc @dummy_sysevent_handler(p_type, p_subtype, p_thread)
			_import l_last_bpt
			_if p_subtype _isnt :bpt
			_then
				_return _false
			_endif
			
			l_frame << p_thread.vm_stack  # VM stack frame
			l_routine << l_frame.routine  # proc
			l_pc << l_frame.pc
			
			# If we return with _true, the PC does not advance.
			# Thus, we must disable/remove the breakpoint and re-enable it later.
			# This is done by storing the last breakpoint and restoring it on the next.
			l_routine.unset_breakpoint(l_pc)
			_if l_last_bpt[1] _isnt _unset
			_then
				_local l_last_routine << l_last_bpt[1]
				_local l_last_pc << l_last_bpt[2]
				l_last_routine.set_breakpoint(l_last_pc)
			_endif
			l_last_bpt[1] << l_routine
			l_last_bpt[2] << l_pc
			
			p_thread.resume()
			_return _true
		_endproc
	
	system.register_sysevent_handler(:thread, l_handler_proc)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.activate()
	_self.set_sysevent_handler()
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.deactivate()
	_self.remove_sysevent_handler()
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_tracker.set_sysevent_handler()
	_local l_coverage << .coverage
	_local l_last_bpt << .last_breakpoint
	_local l_handler_proc <<
		_proc @line_coverage_bpt_handler(p_type, p_subtype, p_thread)
			_import l_coverage, l_last_bpt
			_if p_subtype _isnt :bpt
			_then
				_return _false
			_endif
			
			l_frame << p_thread.vm_stack  # VM stack frame
			l_routine << l_frame.routine  # proc
			l_pc << l_frame.pc
			
			# Record line hit
			_local l_cov_data << l_coverage[l_routine]
			l_cov_data[l_pc] << l_cov_data[l_pc] + 1
			
			# If we return with _true, the PC does not advance.
			# Thus, we must disable/remove the breakpoint and re-enable it later.
			# This is done by storing the last breakpoint and restoring it on the next.
			l_routine.unset_breakpoint(l_pc)
			_if l_last_bpt[1] _isnt _unset
			_then
				_local l_last_routine << l_last_bpt[1]
				_local l_last_pc << l_last_bpt[2]
				l_last_routine.set_breakpoint(l_last_pc)
			_endif
			l_last_bpt[1] << l_routine
			l_last_bpt[2] << l_pc
			
			p_thread.resume()
			_return _true
		_endproc
	system.register_sysevent_handler(:thread, l_handler_proc)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_tracker.remove_sysevent_handler()
	_if .last_breakpoint[1] _isnt _unset
	_then
		_local l_last_routine << .last_breakpoint[1]
		_local l_last_pc << .last_breakpoint[2]
		l_last_routine.set_breakpoint(l_last_pc)
	_endif
	.last_breakpoint << _unset
	system.unregister_sysevent_handler(:thread, :line_coverage_bpt)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_tracker.set_procedure_breakpoints(p_procedure)
	_local l_lc_data << p_procedure.line_coverage_data
	_local l_bps << l_lc_data[:breakpoints].elements
	_for i_pc _over l_bps.fast_elements()
	_loop @over_bps
		#DEBUG write("BRK at: ", i_pc)
		p_procedure.set_breakpoint(i_pc)
		.coverage[p_procedure] << .coverage.at_or_new_if_absent(p_procedure, property_list)
		.coverage[p_procedure][i_pc] << 0
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_coverage_tracker.unset_procedure_breakpoints(p_procedure)
	_local l_lc_data << p_procedure.line_coverage_data
	_local l_bps << l_lc_data[:breakpoints].elements
	_for i_pc _over l_bps.fast_elements()
	_loop @over_bps
		#DEBUG write("unBRK at: ", i_pc)
		p_procedure.unset_breakpoint(i_pc)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.enable_breakpoints_method(p_method)
	_local l_proc << p_method.value
	_if l_proc.class_name _isnt :procedure
	_then
		_return
	_endif
	
	_local l_lc_data << l_proc.line_coverage_data
	_if l_lc_data _isnt _unset
	_then
		_self.set_procedure_breakpoints(l_proc)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.disable_breakpoints_method(p_method)
	_local l_proc << p_method.value
	_if l_proc.class_name _isnt :procedure
	_then
		_return
	_endif
	
	_local l_lc_data << l_proc.line_coverage_data
	_if l_lc_data _isnt _unset
	_then
		_self.unset_procedure_breakpoints(l_proc)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.enable_breakpoints_exemplar(p_exemplar)
	_local l_mt << p_exemplar.method_table
	_for i_method _over l_mt.local_methods(_true)
	_loop
		_self.enable_breakpoints_method(i_method)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.disable_breakpoints_exemplar(p_exemplar)
	_local l_mt << p_exemplar.method_table
	_for i_method _over l_mt.local_methods(_true)
	_loop
		_self.disable_breakpoints_method(i_method)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.enable_breakpoints_package(p_package_name)
	_local l_package << sw:package.all_packages[p_package_name]
	_for i_object _over l_package.fast_elements()
	_loop
		_local l_mt << i_object.method_table
		_local l_exemplar_global << l_mt.metadata[:exemplar_global]
		_if l_exemplar_global.package <> l_package
		_then
			_continue
		_endif
		
		_self.enable_breakpoints_exemplar(i_object)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.disable_breakpoints_package(p_package_name)
	_local l_package << sw:package.all_packages[p_package_name]
	_for i_object _over l_package.fast_elements()
	_loop
		_local l_mt << i_object.method_table
		_local l_exemplar_global << l_mt.metadata[:exemplar_global]
		_if l_exemplar_global.package <> l_package
		_then
			_continue
		_endif
		
		_self.disable_breakpoints_exemplar(i_object)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.enable_breakpoints_all()
	_for i_mt  _over each_class()
	_loop
		_local l_exemplar << _if i_mt.metadata.includes_key?(:exemplar)
				     _then
					     >> i_mt.metadata[:exemplar]
				     _elif i_mt.metadata.includes_key?(:exemplar_global) _isnt _unset
				     _then
					     >> i_mt.metadata[:exemplar_global].value
				     _else
					     >> :missing
				     _endif
		_if l_exemplar _is :missing
		_then
			_continue
		_endif
		_self.enable_breakpoints_exemplar(l_exemplar)
	_endloop
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_coverage_tracker.disable_breakpoints_all()
	_for i_mt _over each_class()
	_loop
		_local l_exemplar << _if i_mt.metadata.includes_key?(:exemplar)
				     _then
					     >> i_mt.metadata[:exemplar]
				     _elif i_mt.metadata.includes_key?(:exemplar_global) _isnt _unset
				     _then
					     >> i_mt.metadata[:exemplar_global].value
				     _else
					     >> :missing
				     _endif
		_if l_exemplar _is :missing
		_then
			_continue
		_endif
		_self.disable_breakpoints_exemplar(l_exemplar)
	_endloop
_endmethod
$
