#% text_encoding = iso8859_1

_pragma(classify_level=restricted, topic={line_coverage})
## Combines lines with procedure/breakpoints
def_slotted_exemplar(
	:line_breakpoint_combiner,
	{
	},
	{})
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_breakpoint_combiner.build_line_breakpoint_map(p_mpn, p_procedure)
	_local (l_x, l_vars, l_lines) << p_mpn.cg_for_process()
	
	_self.preprocess_line_data(p_procedure, l_lines)
	_local l_map << _self.int!map_lines_breakpoints(l_lines, p_procedure)
	
	_return l_map
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_breakpoint_combiner.int!map_lines_breakpoints(p_lines, p_procedure)
	_local l_map << hash_table.new()
	_local l_code_vec << p_procedure.code_vector
	_local l_breakpoint_indices << l_code_vec.valid_breakpoints(p_procedure)
	_for i_line_idx, i_line _over p_lines.fast_keys_and_elements()
	_loop
		_if i_line _is _unset _then _continue _endif
		_if l_map[i_line] _isnt _unset _then _continue _endif
		
		_local l_idx_prev << i_line_idx - 1
		_local l_idx_of_idx_prev << l_breakpoint_indices.index_of(l_idx_prev)
		_local l_valid_breakpoint_idx << l_idx_prev
		_for i_idx _over (l_idx_of_idx_prev - 1).downto(1)
		_loop @over_breakpoints
			_local l_breakpoint_idx << l_breakpoint_indices[i_idx]
			_local l_opcode << l_code_vec.sys!at0(l_breakpoint_idx)
			_if _not _self.is_load_opcode?(l_opcode)
			_then
				_leave @over_breakpoints
			_endif
			l_valid_breakpoint_idx << l_breakpoint_idx
		_endloop
		l_map[i_line] << l_valid_breakpoint_idx
	_endloop
	_return l_map
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_breakpoint_combiner.is_load_opcode?(p_opcode)
	_return p_opcode >= 128 _andif p_opcode <= 143 _orif
		p_opcode >= 160 _andif p_opcode <= 191 _orif
		{240, 241, 244}.includes?(p_opcode)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_method line_breakpoint_combiner.preprocess_line_data(p_proc, p_lines)
	_self.swap_line_blocks(p_proc, p_lines)
	_local l_min_lineno << 0
	_for i_idx, l_lineno  _over p_lines.fast_keys_and_elements()
	_loop
		_if l_lineno _is _unset _then _continue _endif
		
		_if l_lineno < l_min_lineno
		_then
			# clear line
			p_lines[i_idx] << _unset
		_else
			l_min_lineno << l_lineno
		_endif
	_endloop
	_self.swap_line_blocks(p_proc, p_lines, _true)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage})
_private _method line_breakpoint_combiner.swap_line_blocks(p_proc, p_lines, _optional p_reverse?)
	_constant c_vm_codes << property_list.new_with(
		:enter_protect, 101,
		:exit_protect, 102,
		:end_protect, 103)
	
	_local l_code_vector << p_proc.code_vector
	_local l_breakpoint_indices << l_code_vector.valid_breakpoints(p_proc)
	_local l_last_opcode << _unset
	_local l_protect_stack << sw:stack.new()
	_local l_protect_tuples << sw:rope.new()
	_for i_idx  _over l_breakpoint_indices.fast_elements()
	_loop @loop_41043196
		_local l_op_code << l_code_vector.sys!at0(i_idx)
		_if _not c_vm_codes.includes?(l_op_code) _then _continue _endif
		
		_if l_op_code = c_vm_codes[:enter_protect] _orif
		    l_op_code = c_vm_codes[:end_protect]
		_then
			l_protect_stack.push(i_idx)
		_elif l_last_opcode = c_vm_codes[:exit_protect]
		_then
			l_protect_tuples.last[3] << i_idx + 1
		_else 
			_local l_idx_end_protect << l_protect_stack.pop() + 1
			_local l_idx_enter_protect << l_protect_stack.pop() + 1
			_local l_idx_exit_protect << i_idx + 1
			l_protect_tuples.add_last({l_idx_enter_protect, l_idx_end_protect, l_idx_exit_protect})
		_endif
		
		l_last_opcode << l_op_code
	_endloop
	
	_if p_reverse? _is _true
	_then
		l_protect_tuples << l_protect_tuples.reversed()
	_endif
	
	_local l_blocks << sw:rope.new(32) 
	_for i_tuple  _over l_protect_tuples.fast_elements()
	_loop @loop_41043169
		_local (l_idx_enter_protect, l_idx_end_protect, l_idx_exit_protect) << ( _scatter i_tuple)
		l_blocks.empty()
		
		_if p_reverse? _is _true
		_then
			_local l_offset << l_idx_exit_protect - l_idx_end_protect
			_local l_lines_in_protected << p_lines.slice(l_idx_enter_protect + 2 + l_offset, l_idx_end_protect + l_offset)
			_local l_lines_in_protect   << p_lines.slice(l_idx_enter_protect + 2, l_idx_enter_protect + 1 + l_offset)
			l_blocks.add_all_last(l_lines_in_protected)
			l_blocks.add_all_last(l_lines_in_protect)
		_else
			_local l_lines_in_protected << p_lines.slice(l_idx_end_protect + 1, l_idx_exit_protect)
			_local l_lines_in_protect   << p_lines.slice(l_idx_enter_protect + 2, l_idx_end_protect)
			l_blocks.add_all_last(l_lines_in_protected)
			l_blocks.add_all_last(l_lines_in_protect)
		_endif
		
		p_lines.replace_subseq(l_idx_enter_protect + 2, l_blocks.size, l_blocks)
	_endloop
	
	_return p_lines
_endmethod
$

