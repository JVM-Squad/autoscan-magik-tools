#% text_encoding = iso8859_1

_package user

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
def_slotted_exemplar(
	:line_coverage_compiler_tracker_test_case,
	{
		{:active_lcct, _unset}
	},
	{@sw:test_case})
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.set_up()
	.active_lcct << line_coverage_compiler_tracker.new()
	.active_lcct.activate()
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.tear_down()
	.active_lcct.deactivate()
	.active_lcct << _unset
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_private _method line_coverage_compiler_tracker_test_case.load_fixture(p_resource_file)
	_local l_module << sw_module_manager.module(_self.module_name)
	_local l_path << l_module.get_resource_file(p_resource_file, "data/fixtures")
	_dynamic !ignore_magikc?! << _true
	_block
		_handling sw_module_already_defined _with _proc@silentio() _endproc
		_handling recording_overwrite _with _proc@silentio() _endproc
		_dynamic !output! << internal_text_output_stream.new()
		load_file(l_path)
	_endblock
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.test_method_empty()
	_self.load_fixture("method_empty.magik")
	_local l_ex << get_global_value(:lcct_test)
	_local l_method << l_ex.method(:method_empty|()|)
	_local l_proc << l_method.value
	
	_local l_cov_data << l_proc.line_coverage_data
	_self.assert_deep_equals(l_cov_data[:package_name], :user)
	_self.assert_deep_equals(l_cov_data[:class_name], :lcct_test)
	_self.assert_deep_equals(l_cov_data[:method_name], :method_empty|()|)
	_self.assert_deep_equals(l_cov_data[:line_start], 10)
	_self.assert_deep_equals(l_cov_data[:line_end], 11)
	_local l_bpts << hash_table.new_with(10, 0)
	_self.assert_deep_equals(l_cov_data[:breakpoints], l_bpts)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.test_method_write()
	_self.load_fixture("method_write.magik")
	_local l_ex << get_global_value(:lcct_test)
	_local l_method << l_ex.method(:method_write|()|)
	_local l_proc << l_method.value
	
	_local l_cov_data << l_proc.line_coverage_data
	_self.assert_deep_equals(l_cov_data[:package_name], :user)
	_self.assert_deep_equals(l_cov_data[:class_name], :lcct_test)
	_self.assert_deep_equals(l_cov_data[:method_name], :method_write|()|)
	_self.assert_deep_equals(l_cov_data[:line_start], 10)
	_self.assert_deep_equals(l_cov_data[:line_end], 12)
	_local l_bpts << hash_table.new_with(11, 0)
	_self.assert_deep_equals(l_cov_data[:breakpoints], l_bpts)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.test_method_if()
	_self.load_fixture("method_if.magik")
	_local l_ex << get_global_value(:lcct_test)
	_local l_method << l_ex.method(:method_if|()|)
	_local l_proc << l_method.value
	
	_local l_cov_data << l_proc.line_coverage_data
	_self.assert_deep_equals(l_cov_data[:package_name], :user)
	_self.assert_deep_equals(l_cov_data[:class_name], :lcct_test)
	_self.assert_deep_equals(l_cov_data[:method_name], :method_if|()|)
	_self.assert_deep_equals(l_cov_data[:line_start], 10)
	_self.assert_deep_equals(l_cov_data[:line_end], 15)
	_local l_bpts << hash_table.new_with(11, 0,
					     13, 7)
	_self.assert_deep_equals(l_cov_data[:breakpoints], l_bpts)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.test_method_if_else()
	_self.load_fixture("method_if_else.magik")
	_local l_ex << get_global_value(:lcct_test)
	_local l_method << l_ex.method(:method_if_else|()|)
	_local l_proc << l_method.value
	
	_local l_cov_data << l_proc.line_coverage_data
	_self.assert_deep_equals(l_cov_data[:package_name], :user)
	_self.assert_deep_equals(l_cov_data[:class_name], :lcct_test)
	_self.assert_deep_equals(l_cov_data[:method_name], :method_if_else|()|)
	_self.assert_deep_equals(l_cov_data[:line_start], 10)
	_self.assert_deep_equals(l_cov_data[:line_end], 17)
	_local l_bpts << hash_table.new_with(11, 0,
					     13, 7,
					     15, 13)
	_self.assert_deep_equals(l_cov_data[:breakpoints], l_bpts)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_compiler_tracker_test_case.test_method_protect()
	_self.load_fixture("method_protect.magik")
	_local l_ex << get_global_value(:lcct_test)
	_local l_method << l_ex.method(:method_protect|()|)
	_local l_proc << l_method.value
	
	_local l_cov_data << l_proc.line_coverage_data
	_self.assert_deep_equals(l_cov_data[:package_name], :user)
	_self.assert_deep_equals(l_cov_data[:class_name], :lcct_test)
	_self.assert_deep_equals(l_cov_data[:method_name], :method_protect|()|)
	_self.assert_deep_equals(l_cov_data[:line_start], 10)
	_self.assert_deep_equals(l_cov_data[:line_end], 17)
	_local l_bpts << hash_table.new_with(11, 0,
					     13, 11,
					     15, 6)
	_self.assert_deep_equals(l_cov_data[:breakpoints], l_bpts)
_endmethod
$

#test_runner.run(line_coverage_compiler_tracker_test_case)
#$
