#% text_encoding = iso8859_1

_package user

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
def_slotted_exemplar(
	:line_coverage_tracker_test_case,
	{
		{:active_lcct, _unset},
		{:active_lct, _unset}
	},
	{@sw:test_case})
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.set_up()
	.active_lcct << line_coverage_compiler_tracker.new()
	.active_lcct.activate()
	
	.active_lct << line_coverage_tracker.new()
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.tear_down()
	.active_lcct.deactivate()
	.active_lcct << _unset
	
	.active_lct << _unset
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_private _method line_coverage_tracker_test_case.load_fixture(p_resource_file)
	# load code
	_local l_module << sw_module_manager.module(_self.module_name)
	_local l_path << l_module.get_resource_file(p_resource_file, "data/fixtures")
	_dynamic !ignore_magikc?! << _true
	_block
		_handling sw_module_already_defined _with _proc@silentio() _endproc
		_handling recording_overwrite _with _proc@silentio() _endproc
		_dynamic !output! << internal_text_output_stream.new()
		load_file(l_path)
	_endblock
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_private _method line_coverage_tracker_test_case.run_covered(p_exemplar_name, p_method_name)
	# run code
	_local l_ex << get_global_value(p_exemplar_name)
	.active_lct.enable_breakpoints_exemplar(l_ex)
	.active_lct.activate()
	_protect
		_dynamic !output! << internal_text_output_stream.new()
		l_ex.perform(p_method_name)
	_protection
		.active_lct.deactivate()
	_endprotect
	.active_lct.disable_breakpoints_exemplar(l_ex)
	_return .active_lct.coverage
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.test_method_empty()
	_self.load_fixture("method_empty.magik")
	_local l_method_name << :method_empty|()|
	_local l_coverage << _self.run_covered(:lcct_test, l_method_name)
	_local l_proc << l_coverage.keys.all_elements_satisfying(predicate.eq(:name, l_method_name)).an_element()
	_local l_method_coverage << l_coverage[l_proc]
	_local l_expected_method_coverage << property_list.new_with(0, 1)
	_self.assert_deep_equals(l_method_coverage, l_expected_method_coverage)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.test_method_write()
	_self.load_fixture("method_write.magik")
	_local l_method_name << :method_write|()|
	_local l_coverage << _self.run_covered(:lcct_test, l_method_name)
	_local l_proc << l_coverage.keys.all_elements_satisfying(predicate.eq(:name, l_method_name)).an_element()
	_local l_method_coverage << l_coverage[l_proc]
	_local l_expected_method_coverage << property_list.new_with(0, 1)
	_self.assert_deep_equals(l_method_coverage, l_expected_method_coverage)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.test_method_if()
	_self.load_fixture("method_if.magik")
	_local l_method_name << :method_if|()|
	_local l_coverage << _self.run_covered(:lcct_test, l_method_name)
	_local l_proc << l_coverage.keys.all_elements_satisfying(predicate.eq(:name, l_method_name)).an_element()
	_local l_method_coverage << l_coverage[l_proc]
	_local l_expected_method_coverage << property_list.new_with(0, 1,
								    7, 1)
	_self.assert_deep_equals(l_method_coverage, l_expected_method_coverage)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.test_method_if_else()
	_self.load_fixture("method_if_else.magik")
	_local l_method_name << :method_if_else|()|
	_local l_coverage << _self.run_covered(:lcct_test, l_method_name)
	_local l_proc << l_coverage.keys.all_elements_satisfying(predicate.eq(:name, l_method_name)).an_element()
	_local l_method_coverage << l_coverage[l_proc]
	_local l_expected_method_coverage << property_list.new_with(0, 1,
								    7, 1,
								    13, 0)
	_self.assert_deep_equals(l_method_coverage, l_expected_method_coverage)
_endmethod
$

_pragma(classify_level=restricted, topic={line_coverage, unit_tests})
_method line_coverage_tracker_test_case.test_method_protect()
	_self.load_fixture("method_protect.magik")
	_local l_method_name << :method_protect|()|
	_local l_coverage << _self.run_covered(:lcct_test, l_method_name)
	_local l_proc << l_coverage.keys.all_elements_satisfying(predicate.eq(:name, l_method_name)).an_element()
	_local l_method_coverage << l_coverage[l_proc]
	_local l_expected_method_coverage << property_list.new_with(0, 1,
								    6, 1,
								    11, 1)
	_self.assert_deep_equals(l_method_coverage, l_expected_method_coverage)
_endmethod
$

#test_runner.run(line_coverage_tracker_test_case)
#$
