package org.stevenlooman.sw.magik.analysis;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.AstNodeType;
import com.sonar.sslr.api.Token;
import com.sonar.sslr.api.Trivia;

import org.stevenlooman.sw.magik.api.MagikGrammar;

/**
 * A {{AstNode}} tree walker with pre- and post-methods to iterate a parse tree.
 * Note that this is generated by the {{generate_ast_walker.py}} script,
 * do not edit this file manually!
 */
public abstract class AstWalker {

  protected void walkChildren(AstNode node) {
    for (AstNode childNode : node.getChildren()) {
      walkAst(childNode);
    }
  }

  /**
   * Start walking the node. The pre- and post-methods are called upon tree traversal.
   * @param node Node to start walking.
   */
  public void walkAst(AstNode node) {
    AstNodeType nodeType = node.getType();
    if (!(nodeType instanceof MagikGrammar)) {
      for (Token token : node.getTokens()) {
        this.walkToken(token);
        token.getTrivia().forEach(this::walkTrivia);
      }
      return;
    }
    MagikGrammar value = (MagikGrammar)nodeType;

    switch (value) {
      default:
        walkPreDefault(node);
        walkChildren(node);
        walkPostDefault(node);
        break;

      case SYNTAX_ERROR:
        walkPreSyntaxError(node);
        walkChildren(node);
        walkPostSyntaxError(node);
        break;

      case MAGIK:
        walkPreMagik(node);
        walkChildren(node);
        walkPostMagik(node);
        break;

      case PRAGMA:
        walkPrePragma(node);
        walkChildren(node);
        walkPostPragma(node);
        break;

      case PACKAGE_SPECIFICATION:
        walkPrePackageSpecification(node);
        walkChildren(node);
        walkPostPackageSpecification(node);
        break;

      case METHOD_DEFINITION:
        walkPreMethodDefinition(node);
        walkChildren(node);
        walkPostMethodDefinition(node);
        break;

      case TRANSMIT:
        walkPreTransmit(node);
        walkChildren(node);
        walkPostTransmit(node);
        break;

      case PRAGMA_PARAMS:
        walkPrePragmaParams(node);
        walkChildren(node);
        walkPostPragmaParams(node);
        break;

      case PRAGMA_PARAM:
        walkPrePragmaParam(node);
        walkChildren(node);
        walkPostPragmaParam(node);
        break;

      case PRAGMA_VALUE:
        walkPrePragmaValue(node);
        walkChildren(node);
        walkPostPragmaValue(node);
        break;

      case PARAMETERS:
        walkPreParameters(node);
        walkChildren(node);
        walkPostParameters(node);
        break;

      case INDEXER_PARAMETERS:
        walkPreIndexerParameters(node);
        walkChildren(node);
        walkPostIndexerParameters(node);
        break;

      case PARAMETER:
        walkPreParameter(node);
        walkChildren(node);
        walkPostParameter(node);
        break;

      case ASSIGNMENT_PARAMETER:
        walkPreAssignmentParameter(node);
        walkChildren(node);
        walkPostAssignmentParameter(node);
        break;

      case BODY:
        walkPreBody(node);
        walkChildren(node);
        walkPostBody(node);
        break;

      case OPERATOR:
        walkPreOperator(node);
        walkChildren(node);
        walkPostOperator(node);
        break;

      case MULTI_VALUE_EXPRESSION:
        walkPreMultiValueExpression(node);
        walkChildren(node);
        walkPostMultiValueExpression(node);
        break;

      case IDENTIFIERS:
        walkPreIdentifiers(node);
        walkChildren(node);
        walkPostIdentifiers(node);
        break;

      case IDENTIFIERS_WITH_GATHER:
        walkPreIdentifiersWithGather(node);
        walkChildren(node);
        walkPostIdentifiersWithGather(node);
        break;

      case METHOD_INVOCATION:
        walkPreMethodInvocation(node);
        walkChildren(node);
        walkPostMethodInvocation(node);
        break;

      case INDEX_INVOCATION:
        walkPreIndexInvocation(node);
        walkChildren(node);
        walkPostIndexInvocation(node);
        break;

      case METHOD_INVOCATION_ASSIGNMENT:
        walkPreMethodInvocationAssignment(node);
        walkChildren(node);
        walkPostMethodInvocationAssignment(node);
        break;

      case PROCEDURE_INVOCATION:
        walkPreProcedureInvocation(node);
        walkChildren(node);
        walkPostProcedureInvocation(node);
        break;

      case METHOD_MODIFIER:
        walkPreMethodModifier(node);
        walkChildren(node);
        walkPostMethodModifier(node);
        break;

      case PARAMETER_MODIFIER:
        walkPreParameterModifier(node);
        walkChildren(node);
        walkPostParameterModifier(node);
        break;

      case VARIABLE_DEFINITION_MODIFIER:
        walkPreVariableDefinitionModifier(node);
        walkChildren(node);
        walkPostVariableDefinitionModifier(node);
        break;

      case VARIABLE_DEFINITION_MULTI:
        walkPreVariableDefinitionMulti(node);
        walkChildren(node);
        walkPostVariableDefinitionMulti(node);
        break;

      case VARIABLE_DEFINITION:
        walkPreVariableDefinition(node);
        walkChildren(node);
        walkPostVariableDefinition(node);
        break;

      case STATEMENT:
        walkPreStatement(node);
        walkChildren(node);
        walkPostStatement(node);
        break;

      case STATEMENT_SEPARATOR:
        walkPreStatementSeparator(node);
        walkChildren(node);
        walkPostStatementSeparator(node);
        break;

      case VARIABLE_DEFINITION_STATEMENT:
        walkPreVariableDefinitionStatement(node);
        walkChildren(node);
        walkPostVariableDefinitionStatement(node);
        break;

      case MULTIPLE_ASSIGNMENT_STATEMENT:
        walkPreMultipleAssignmentStatement(node);
        walkChildren(node);
        walkPostMultipleAssignmentStatement(node);
        break;

      case RETURN_STATEMENT:
        walkPreReturnStatement(node);
        walkChildren(node);
        walkPostReturnStatement(node);
        break;

      case EMIT_STATEMENT:
        walkPreEmitStatement(node);
        walkChildren(node);
        walkPostEmitStatement(node);
        break;

      case EXPRESSION_STATEMENT:
        walkPreExpressionStatement(node);
        walkChildren(node);
        walkPostExpressionStatement(node);
        break;

      case PRIMITIVE_STATEMENT:
        walkPrePrimitiveStatement(node);
        walkChildren(node);
        walkPostPrimitiveStatement(node);
        break;

      case LEAVE_STATEMENT:
        walkPreLeaveStatement(node);
        walkChildren(node);
        walkPostLeaveStatement(node);
        break;

      case CONTINUE_STATEMENT:
        walkPreContinueStatement(node);
        walkChildren(node);
        walkPostContinueStatement(node);
        break;

      case THROW_STATEMENT:
        walkPreThrowStatement(node);
        walkChildren(node);
        walkPostThrowStatement(node);
        break;

      case HANDLING:
        walkPreHandling(node);
        walkChildren(node);
        walkPostHandling(node);
        break;

      case BLOCK:
        walkPreBlock(node);
        walkChildren(node);
        walkPostBlock(node);
        break;

      case PROTECT:
        walkPreProtect(node);
        walkChildren(node);
        walkPostProtect(node);
        break;

      case PROTECTION:
        walkPreProtection(node);
        walkChildren(node);
        walkPostProtection(node);
        break;

      case TRY:
        walkPreTry(node);
        walkChildren(node);
        walkPostTry(node);
        break;

      case WHEN:
        walkPreWhen(node);
        walkChildren(node);
        walkPostWhen(node);
        break;

      case CATCH:
        walkPreCatch(node);
        walkChildren(node);
        walkPostCatch(node);
        break;

      case LOCK:
        walkPreLock(node);
        walkChildren(node);
        walkPostLock(node);
        break;

      case IF:
        walkPreIf(node);
        walkChildren(node);
        walkPostIf(node);
        break;

      case ELIF:
        walkPreElif(node);
        walkChildren(node);
        walkPostElif(node);
        break;

      case ELSE:
        walkPreElse(node);
        walkChildren(node);
        walkPostElse(node);
        break;

      case FOR:
        walkPreFor(node);
        walkChildren(node);
        walkPostFor(node);
        break;

      case WHILE:
        walkPreWhile(node);
        walkChildren(node);
        walkPostWhile(node);
        break;

      case OVER:
        walkPreOver(node);
        walkChildren(node);
        walkPostOver(node);
        break;

      case LOOP:
        walkPreLoop(node);
        walkChildren(node);
        walkPostLoop(node);
        break;

      case FINALLY:
        walkPreFinally(node);
        walkChildren(node);
        walkPostFinally(node);
        break;

      case EXPRESSION:
        walkPreExpression(node);
        walkChildren(node);
        walkPostExpression(node);
        break;

      case ASSIGNMENT_EXPRESSION:
        walkPreAssignmentExpression(node);
        walkChildren(node);
        walkPostAssignmentExpression(node);
        break;

      case AUGMENTED_ASSIGNMENT_EXPRESSION:
        walkPreAugmentedAssignmentExpression(node);
        walkChildren(node);
        walkPostAugmentedAssignmentExpression(node);
        break;

      case OR_EXPRESSION:
        walkPreOrExpression(node);
        walkChildren(node);
        walkPostOrExpression(node);
        break;

      case XOR_EXPRESSION:
        walkPreXorExpression(node);
        walkChildren(node);
        walkPostXorExpression(node);
        break;

      case AND_EXPRESSION:
        walkPreAndExpression(node);
        walkChildren(node);
        walkPostAndExpression(node);
        break;

      case EQUALITY_EXPRESSION:
        walkPreEqualityExpression(node);
        walkChildren(node);
        walkPostEqualityExpression(node);
        break;

      case RELATIONAL_EXPRESSION:
        walkPreRelationalExpression(node);
        walkChildren(node);
        walkPostRelationalExpression(node);
        break;

      case ADDITIVE_EXPRESSION:
        walkPreAdditiveExpression(node);
        walkChildren(node);
        walkPostAdditiveExpression(node);
        break;

      case MULTIPLICATIVE_EXPRESSION:
        walkPreMultiplicativeExpression(node);
        walkChildren(node);
        walkPostMultiplicativeExpression(node);
        break;

      case EXPONENTIAL_EXPRESSION:
        walkPreExponentialExpression(node);
        walkChildren(node);
        walkPostExponentialExpression(node);
        break;

      case UNARY_EXPRESSION:
        walkPreUnaryExpression(node);
        walkChildren(node);
        walkPostUnaryExpression(node);
        break;

      case POSTFIX_EXPRESSION:
        walkPrePostfixExpression(node);
        walkChildren(node);
        walkPostPostfixExpression(node);
        break;

      case ATOM:
        walkPreAtom(node);
        walkChildren(node);
        walkPostAtom(node);
        break;

      case ARGUMENTS:
        walkPreArguments(node);
        walkChildren(node);
        walkPostArguments(node);
        break;

      case ARGUMENT:
        walkPreArgument(node);
        walkChildren(node);
        walkPostArgument(node);
        break;

      case CONDITIONAL_EXPRESSION:
        walkPreConditionalExpression(node);
        walkChildren(node);
        walkPostConditionalExpression(node);
        break;

      case ITERABLE_EXPRESSION:
        walkPreIterableExpression(node);
        walkChildren(node);
        walkPostIterableExpression(node);
        break;

      case ALLRESULTS:
        walkPreAllresults(node);
        walkChildren(node);
        walkPostAllresults(node);
        break;

      case SCATTER_EXPRESSION:
        walkPreScatterExpression(node);
        walkChildren(node);
        walkPostScatterExpression(node);
        break;

      case STRING:
        walkPreString(node);
        walkChildren(node);
        walkPostString(node);
        break;

      case NUMBER:
        walkPreNumber(node);
        walkChildren(node);
        walkPostNumber(node);
        break;

      case CHARACTER:
        walkPreCharacter(node);
        walkChildren(node);
        walkPostCharacter(node);
        break;

      case SYMBOL:
        walkPreSymbol(node);
        walkChildren(node);
        walkPostSymbol(node);
        break;

      case IDENTIFIER:
        walkPreIdentifier(node);
        walkChildren(node);
        walkPostIdentifier(node);
        break;

      case LABEL:
        walkPreLabel(node);
        walkChildren(node);
        walkPostLabel(node);
        break;

      case SLOT:
        walkPreSlot(node);
        walkChildren(node);
        walkPostSlot(node);
        break;

      case GLOBAL_REF:
        walkPreGlobalRef(node);
        walkChildren(node);
        walkPostGlobalRef(node);
        break;

      case SIMPLE_VECTOR:
        walkPreSimpleVector(node);
        walkChildren(node);
        walkPostSimpleVector(node);
        break;

      case GATHER:
        walkPreGather(node);
        walkChildren(node);
        walkPostGather(node);
        break;

      case CLASS:
        walkPreClass(node);
        walkChildren(node);
        walkPostClass(node);
        break;

      case LOOPBODY:
        walkPreLoopbody(node);
        walkChildren(node);
        walkPostLoopbody(node);
        break;

      case PROC_DEFINITION:
        walkPreProcDefinition(node);
        walkChildren(node);
        walkPostProcDefinition(node);
        break;

      case SELF:
        walkPreSelf(node);
        walkChildren(node);
        walkPostSelf(node);
        break;

      case CLONE:
        walkPreClone(node);
        walkChildren(node);
        walkPostClone(node);
        break;

      case UNSET:
        walkPreUnset(node);
        walkChildren(node);
        walkPostUnset(node);
        break;

      case TRUE:
        walkPreTrue(node);
        walkChildren(node);
        walkPostTrue(node);
        break;

      case FALSE:
        walkPreFalse(node);
        walkChildren(node);
        walkPostFalse(node);
        break;

      case MAYBE:
        walkPreMaybe(node);
        walkChildren(node);
        walkPostMaybe(node);
        break;

      case THISTHREAD:
        walkPreThisthread(node);
        walkChildren(node);
        walkPostThisthread(node);
        break;

      case SUPER:
        walkPreSuper(node);
        walkChildren(node);
        walkPostSuper(node);
        break;

    }
  }

  protected void walkPreSyntaxError(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostSyntaxError(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMagik(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMagik(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePragma(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPragma(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePackageSpecification(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPackageSpecification(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMethodDefinition(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMethodDefinition(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreTransmit(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostTransmit(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePragmaParams(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPragmaParams(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePragmaParam(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPragmaParam(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePragmaValue(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPragmaValue(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreParameters(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostParameters(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIndexerParameters(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIndexerParameters(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreParameter(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostParameter(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAssignmentParameter(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAssignmentParameter(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreBody(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostBody(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreOperator(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostOperator(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMultiValueExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMultiValueExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIdentifiers(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIdentifiers(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIdentifiersWithGather(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIdentifiersWithGather(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMethodInvocation(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMethodInvocation(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIndexInvocation(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIndexInvocation(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMethodInvocationAssignment(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMethodInvocationAssignment(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreProcedureInvocation(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostProcedureInvocation(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMethodModifier(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMethodModifier(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreParameterModifier(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostParameterModifier(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreVariableDefinitionModifier(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostVariableDefinitionModifier(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreVariableDefinitionMulti(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostVariableDefinitionMulti(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreVariableDefinition(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostVariableDefinition(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreStatementSeparator(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostStatementSeparator(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreVariableDefinitionStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostVariableDefinitionStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMultipleAssignmentStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMultipleAssignmentStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreReturnStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostReturnStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreEmitStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostEmitStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreExpressionStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostExpressionStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePrimitiveStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPrimitiveStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreLeaveStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostLeaveStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreContinueStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostContinueStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreThrowStatement(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostThrowStatement(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreHandling(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostHandling(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreBlock(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostBlock(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreProtect(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostProtect(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreProtection(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostProtection(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreTry(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostTry(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreWhen(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostWhen(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreCatch(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostCatch(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreLock(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostLock(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIf(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIf(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreElif(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostElif(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreElse(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostElse(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreFor(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostFor(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreWhile(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostWhile(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreOver(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostOver(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreLoop(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostLoop(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreFinally(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostFinally(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAssignmentExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAssignmentExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAugmentedAssignmentExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAugmentedAssignmentExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreOrExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostOrExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreXorExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostXorExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAndExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAndExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreEqualityExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostEqualityExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreRelationalExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostRelationalExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAdditiveExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAdditiveExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMultiplicativeExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMultiplicativeExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreExponentialExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostExponentialExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreUnaryExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostUnaryExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPrePostfixExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostPostfixExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAtom(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAtom(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreArguments(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostArguments(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreArgument(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostArgument(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreConditionalExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostConditionalExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIterableExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIterableExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreAllresults(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostAllresults(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreScatterExpression(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostScatterExpression(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreString(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostString(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreNumber(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostNumber(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreCharacter(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostCharacter(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreSymbol(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostSymbol(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreIdentifier(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostIdentifier(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreLabel(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostLabel(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreSlot(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostSlot(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreGlobalRef(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostGlobalRef(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreSimpleVector(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostSimpleVector(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreGather(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostGather(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreClass(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostClass(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreLoopbody(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostLoopbody(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreProcDefinition(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostProcDefinition(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreSelf(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostSelf(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreClone(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostClone(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreUnset(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostUnset(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreTrue(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostTrue(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreFalse(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostFalse(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreMaybe(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostMaybe(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreThisthread(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostThisthread(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreSuper(AstNode node) {
    walkPreDefault(node);
  }

  protected void walkPostSuper(AstNode node) {
    walkPostDefault(node);
  }

  protected void walkPreDefault(AstNode node) {
    // pass
  }

  protected void walkPostDefault(AstNode node) {
    // pass
  }

  protected void walkToken(Token token) {
    // pass
  }

  protected void walkTrivia(Trivia trivia) {
    // pass
  }

}
