#!/usr/bin/env python3

# Generate the AstWalker class from the MagikGrammar.
# Running:
#   $ pwd
#   .../sonar-magik/magik-squid/src/main/java/org/stevenlooman/sw/magik/analysis
#   $ cat ../api/MagikGrammar.java | ./generate_ast_walker.py >! AstWalker.java

import fileinput
import re

IGNORE_ELEMENTS = ['WHITESPACE', 'SPACING', 'SPACING_NO_LB', 'NEXT_NOT_LB', 'EOS']

elements = [line[2:-2]
            for line in fileinput.input()
            if re.match(r"[ ]{2}[A-Z_]+,", line) and \
               line[2:-2] not in IGNORE_ELEMENTS]

def to_java_name(element):
  return ''.join(el.title() for el in element.split("_"))


# generate preamble
print("""package org.stevenlooman.sw.magik.analysis;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.AstNodeType;
import com.sonar.sslr.api.Token;
import com.sonar.sslr.api.Trivia;

import org.stevenlooman.sw.magik.api.MagikGrammar;

/**
 * A {{AstNode}} tree walker with pre- and post-methods to iterate a parse tree.
 * Note that this is generated by the {{generate_ast_walker.py}} script,
 * do not edit this file manually!
 */
public abstract class AstWalker {

  protected void walkChildren(AstNode node) {
    for (AstNode childNode : node.getChildren()) {
      walkAst(childNode);
    }
  }

  /**
   * Start walking the node. The pre- and post-methods are called upon tree traversal.
   * @param node Node to start walking.
   */
  public void walkAst(AstNode node) {
    AstNodeType nodeType = node.getType();
    if (!(nodeType instanceof MagikGrammar)) {
      for (Token token : node.getTokens()) {
        this.walkToken(token);
        token.getTrivia().forEach(this::walkTrivia);
      }
      return;
    }
    MagikGrammar value = (MagikGrammar)nodeType;

    switch (value) {
      default:
        walkPreDefault(node);
        walkChildren(node);
        walkPostDefault(node);
        break;""")

# generate cases
for element in elements:
  java_name = to_java_name(element)
  print(f"""
      case {element}:
        walkPre{java_name}(node);
        walkChildren(node);
        walkPost{java_name}(node);
        break;""")

print("""
    }
  }""")

# generate pre- and post-walk-methods
for element in elements:
  java_name = to_java_name(element)
  print(f"""
  protected void walkPre{java_name}(AstNode node) {{
    walkPreDefault(node);
  }}

  protected void walkPost{java_name}(AstNode node) {{
    walkPostDefault(node);
  }}""")

print("""
  protected void walkPreDefault(AstNode node) {
    // pass
  }

  protected void walkPostDefault(AstNode node) {
    // pass
  }

  protected void walkToken(Token token) {
    // pass
  }

  protected void walkTrivia(Trivia trivia) {
    // pass
  }

}""")